ОСНОВНЫЕ КОНЦЕПЦИИ:

Три стадии ленивости:
1. (BI_LAZY) Бездействие —> данные хранятся как единое целое и не парсятся вообще
2. (BI_MODERATE) Действия, не изменяющие размер -> создаётся массив узлов с индексами, указывающими на сырые данные
3. (BI_BUSY) Действия, изменяющие размер -> из массива узлов создаётся дерево в каждом узле которого хранятся его данные

Три вида изменения записи:
1. Ленивое обновление — изменение данных на побитовом уровне. (BI_MODERATE — без необходимости изменения размеров)
2. JamIn — старый массив разбивается на 2 части, создаётся новый массив необходимого размера, новые данные 
записываются следующим образом: старые данные до целевого индекса, новые данные, старые данные после целевого индекса. 
Вполне вероятно, что это будет работать значительно быстрее в случаях, когда запись BiDaT состоит из большого 
количества маленьких значений (много времени на разбор дерева) или когда изменения размеров записи не требуются 
слишком часто (вставить несколько байт один раз будет быстрее, чем разобрать дерево). Запись при этом остаётся в 
режиме BI_MODERATE, но позволяет изменить размер записи.
3. Тщательное обновление — запись преобразуется дерево. Подходит для случаев, когда дерево получается большим и
требует частых изменений размера записи.   


ТЕКУЩИЕ ЗАДАЧИ:

0 Проверка концепций
    + 0.1 Класс узлов
    + 0.2 Класс списков
    0.3 Класс корневого узла
    0.4 Реализовать уровни доступа
    0.5 Узел бинарных данных
    0.6 Узел строк
    0.7 Узел именованных массивов
1 Ленивый режим
	1.1 Объект корневого узла
	1.2 Чтение файлов стандартными средствами
	1.3 Управление памятью (чистка при удалении иподобное)
2 Режим в меру
	2.1 Доступ к данным по индексу или ключу
	2.2 Использовать хэш для быстрого доступа к данным по ключу. 
3 Занятой режим 
	3.1 Построение дерева