/////////////
// О ЯЗЫКЕ //
/////////////

BiDaT (Binary Data Transfer) это простой бинарный язык для передачи иерархических данных.

//////////////////////////
// ОСНОВНЫЕ ОСОБЕННОСТИ //
//////////////////////////

1. Простота трансляции языка.
  Сообщение на языке BiDaT можно транслировать методом рекурсивного спуска.
2. Нормативность.
  В языке нет двойственности типов: размеры значений, порядок битов и строковая кодировка строго определены и входят в определение языка.
3. Поддержка основных типов.
  Простые значения могут принимать целый, вещественный, строковый и булев типы.
4. Иерархичность.
  Язык поддерживает списки и именнованные списки (ассоциативные "массивы" с ключами-строками). Значения в списках могут быть любого типа (в том числе и другим списком / именованным списком).
5. Ничего лишнего.
  Язык не пытается стать чем-то большим, чем он является. BiDaT — это бинарный язык для передачи иерархических данных. Никаких других задач он выполнять не стремится.
6. Открытость:
  MIT лицензия.

/////////////
// ЛЕКСИКА //
/////////////

Нетерминальные символы:
1. RECORD — отражает содеражние одной записи на языке BiDaT
2. VALUE — отражает одиночное значение определённого типа
3. LIST — список значений (ключи — целые числа)
4. LARGE_LIST — большой список значеинй (ключи — целые числа)
5. NAMED_LIST — именованный список (ключи — строки)
6. LARGE_NAMED_LIST — большой именованный список (ключи — строки)
7. LIST_SIZE — кол-во значений в списке (или пар ключ-значение для именованных списков)
8. LARGE_LIST_SIZE — кол-во значений в большом списке (или пар ключ-значение для именованных списков)
9. VALUE_NAME — имя(ключ) значения в именованном списке
10. LIST_VALUES — последовательность значений (VALUE) в списке
11. NAMED_LIST_VALUES — последовательность пар ключ-значение в именованном списке

Терминальные символы:
1. 00..FF — конкретные байты (0x00..0xFF)
2. sint = 1 байт, little endian, unsigned char
3. int = 4 байта, little endian, signed int.
4. uint = 4 байта, little endian, unsigned int.
5. real = 8 байтов, little endian, float64 (double).
6. bool = 1 байт, 0x01 или 0x00 для True или False соответственно
7. string = Нуль-терминированная строка (завершается символом 0x00), кодировка UTF-8.
8. binary = Бинарные данные произвольного размера.

////////////////
// ГРАММАТИКА //
////////////////

1. RECORD ::= 00 VALUE FF
2. VALUE ::= 01 int | 02 real | 03 bool | 04 string | 05 LIST | 15 LARGE_LIST | 06 NAMED_LIST | 16 LARGE_NAMED_LIST | 07 BINARY_DATA | 17 LARGE_BINARY_DATA
3. LIST ::= LIST_SIZE LIST_VALUES
4. LARGE_LIST ::= LARGE_LIST_SIZE LIST_VALUES
5. LIST_VALUES := VALUE VALUE ... VALUE  // кол-во значений равно LIST_SIZE или LARGE_LIST_SIZE этого списка
6. NAMED_LIST ::= LIST_SIZE NAMED_LIST_VALUES
7. LARGE_NAMED_LIST ::= LARGE_LIST_SIZE NAMED_LIST_VALUES
8. NAMED_LIST_VALUES ::= VALUE_NAME VALUE VALUE_NAME VALUE ... VALUE_NAME VALUE  // кол-во пар ключ-значение равно LIST_SIZE или LARGE_LIST_SIZE этого списка
9. BINARY_DATA ::= BINARY_SIZE binary  // длинна бинарных данных равна BINARY_SIZE
10. LARGE_BINARY_DATA ::= LARGE_BINARY_SIZE binary  // Длинна бинарных данных равна LARGE_BINARY_SIZE
11. VALUE_NAME ::= string
12. LIST_SIZE ::= sint
13. LARGE_LIST_SIZE ::= uint
14. BINARY_SIZE ::= sint
15. LARGE_BINARY_SIZE ::= uint
